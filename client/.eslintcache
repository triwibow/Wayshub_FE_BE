[{"D:\\dumbways\\WaysHub\\client\\src\\index.js":"1","D:\\dumbways\\WaysHub\\client\\src\\pages\\Home.js":"2","D:\\dumbways\\WaysHub\\client\\src\\pages\\Login.js":"3","D:\\dumbways\\WaysHub\\client\\src\\pages\\Register.js":"4","D:\\dumbways\\WaysHub\\client\\src\\pages\\Subscribtion.js":"5","D:\\dumbways\\WaysHub\\client\\src\\route\\PrivateRoute.js":"6","D:\\dumbways\\WaysHub\\client\\src\\api\\PostVideo.js":"7","D:\\dumbways\\WaysHub\\client\\src\\component\\form\\SuccessInfo.js":"8","D:\\dumbways\\WaysHub\\client\\src\\component\\navbar\\Navbar.js":"9","D:\\dumbways\\WaysHub\\client\\src\\component\\channel\\ChannelDescription.js":"10","D:\\dumbways\\WaysHub\\client\\src\\component\\form\\ErrorInfo.js":"11","D:\\dumbways\\WaysHub\\client\\src\\component\\comment\\CommentList.js":"12","D:\\dumbways\\WaysHub\\client\\src\\component\\form\\InputField.js":"13","D:\\dumbways\\WaysHub\\client\\src\\component\\form\\Alert.js":"14","D:\\dumbways\\WaysHub\\client\\src\\context\\AppContext.js":"15","D:\\dumbways\\WaysHub\\client\\src\\App.js":"16","D:\\dumbways\\WaysHub\\client\\src\\pages\\ContentCreator.js":"17","D:\\dumbways\\WaysHub\\client\\src\\config\\api.js":"18","D:\\dumbways\\WaysHub\\client\\src\\api\\SubscribtionVideo.js":"19","D:\\dumbways\\WaysHub\\client\\src\\component\\card\\Card.js":"20","D:\\dumbways\\WaysHub\\client\\src\\component\\video\\Video.js":"21","D:\\dumbways\\WaysHub\\client\\src\\component\\form\\TextAreaField.js":"22","D:\\dumbways\\WaysHub\\client\\src\\pages\\Detail.js":"23","D:\\dumbways\\WaysHub\\client\\src\\pages\\MyChannel.js":"24","D:\\dumbways\\WaysHub\\client\\src\\pages\\EditChannel.js":"25","D:\\dumbways\\WaysHub\\client\\src\\component\\sidebar\\Sidebar.js":"26","D:\\dumbways\\WaysHub\\client\\src\\component\\dropdown\\Dropdown.js":"27","D:\\dumbways\\WaysHub\\client\\src\\route\\AuthUser.js":"28","D:\\dumbways\\WaysHub\\client\\src\\component\\channel\\ChannelVideo.js":"29","D:\\dumbways\\WaysHub\\client\\src\\component\\comment\\Comment.js":"30","D:\\dumbways\\WaysHub\\client\\src\\pages\\AddVideo.js":"31","D:\\dumbways\\WaysHub\\client\\src\\component\\channel\\ChannelHeader.js":"32","D:\\dumbways\\WaysHub\\client\\src\\api\\User.js":"33","D:\\dumbways\\WaysHub\\client\\src\\component\\preview\\Preview.js":"34","D:\\dumbways\\WaysHub\\client\\src\\component\\loader\\ButtonLoader.js":"35","D:\\dumbways\\WaysHub\\client\\src\\component\\modal\\Modal.js":"36","D:\\dumbways\\WaysHub\\client\\src\\component\\video\\EmptyVideo.js":"37","D:\\dumbways\\WaysHub\\client\\src\\component\\loader\\VideoChanelLoader.js":"38","D:\\dumbways\\WaysHub\\client\\src\\component\\modal\\SubscribeModal.js":"39","D:\\dumbways\\WaysHub\\client\\src\\component\\dropdown\\DropdownComment.js":"40","D:\\dumbways\\WaysHub\\client\\src\\component\\modal\\CommentModal.js":"41","D:\\dumbways\\WaysHub\\client\\src\\component\\loader\\CommentLoader.js":"42","D:\\dumbways\\WaysHub\\client\\src\\component\\loader\\PageLoader.js":"43"},{"size":334,"mtime":1607351528885,"results":"44","hashOfConfig":"45"},{"size":1765,"mtime":1607879700638,"results":"46","hashOfConfig":"45"},{"size":4132,"mtime":1607507422939,"results":"47","hashOfConfig":"45"},{"size":5738,"mtime":1607578654199,"results":"48","hashOfConfig":"45"},{"size":1861,"mtime":1607868769008,"results":"49","hashOfConfig":"45"},{"size":649,"mtime":1607534443564,"results":"50","hashOfConfig":"45"},{"size":2367,"mtime":1606295162270,"results":"51","hashOfConfig":"45"},{"size":205,"mtime":1607577851989,"results":"52","hashOfConfig":"45"},{"size":2205,"mtime":1607868640959,"results":"53","hashOfConfig":"45"},{"size":260,"mtime":1607497383402,"results":"54","hashOfConfig":"45"},{"size":267,"mtime":1606715886659,"results":"55","hashOfConfig":"45"},{"size":3006,"mtime":1607879027255,"results":"56","hashOfConfig":"45"},{"size":2756,"mtime":1607434150342,"results":"57","hashOfConfig":"45"},{"size":193,"mtime":1607338389053,"results":"58","hashOfConfig":"45"},{"size":2293,"mtime":1607868668307,"results":"59","hashOfConfig":"45"},{"size":2327,"mtime":1607532680710,"results":"60","hashOfConfig":"45"},{"size":7781,"mtime":1607848444972,"results":"61","hashOfConfig":"45"},{"size":363,"mtime":1607334220546,"results":"62","hashOfConfig":"45"},{"size":2531,"mtime":1606299086165,"results":"63","hashOfConfig":"45"},{"size":2091,"mtime":1607862791299,"results":"64","hashOfConfig":"45"},{"size":4441,"mtime":1607862893642,"results":"65","hashOfConfig":"45"},{"size":2677,"mtime":1607436915461,"results":"66","hashOfConfig":"45"},{"size":9529,"mtime":1607885918967,"results":"67","hashOfConfig":"45"},{"size":3862,"mtime":1607755469009,"results":"68","hashOfConfig":"45"},{"size":8418,"mtime":1607588328614,"results":"69","hashOfConfig":"45"},{"size":3139,"mtime":1607849299701,"results":"70","hashOfConfig":"45"},{"size":1456,"mtime":1606659574307,"results":"71","hashOfConfig":"45"},{"size":683,"mtime":1607356832901,"results":"72","hashOfConfig":"45"},{"size":989,"mtime":1607754566950,"results":"73","hashOfConfig":"45"},{"size":2058,"mtime":1607878840196,"results":"74","hashOfConfig":"45"},{"size":6592,"mtime":1607588842463,"results":"75","hashOfConfig":"45"},{"size":1694,"mtime":1607612185657,"results":"76","hashOfConfig":"45"},{"size":465,"mtime":1606632825373,"results":"77","hashOfConfig":"45"},{"size":512,"mtime":1607535935758,"results":"78","hashOfConfig":"45"},{"size":155,"mtime":1607575874689,"results":"79","hashOfConfig":"45"},{"size":1019,"mtime":1607798005138,"results":"80","hashOfConfig":"45"},{"size":904,"mtime":1607755454465,"results":"81","hashOfConfig":"45"},{"size":251,"mtime":1607605350570,"results":"82","hashOfConfig":"45"},{"size":741,"mtime":1607848244526,"results":"83","hashOfConfig":"45"},{"size":725,"mtime":1607792854039,"results":"84","hashOfConfig":"45"},{"size":1039,"mtime":1607792973617,"results":"85","hashOfConfig":"45"},{"size":157,"mtime":1607794850864,"results":"86","hashOfConfig":"45"},{"size":221,"mtime":1607859678547,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1dpfr11",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"110"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"110"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"90"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"D:\\dumbways\\WaysHub\\client\\src\\index.js",[],["197","198"],"D:\\dumbways\\WaysHub\\client\\src\\pages\\Home.js",[],"D:\\dumbways\\WaysHub\\client\\src\\pages\\Login.js",["199"],"import {Link} from 'react-router-dom';\r\nimport {useState, useRef, createRef, useContext} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {AppContext} from '../context/AppContext';\r\nimport '../App.css';\r\nimport title from '../title.svg';\r\nimport InputField from '../component/form/InputField';\r\nimport Alert from '../component/form/Alert';\r\nimport { API, setAuthToken } from '../config/api';\r\n\r\nconst Login = () => {\r\n    const router = useHistory()\r\n    const [state, dispatch] = useContext(AppContext);\r\n    const inputRef = useRef([createRef(), createRef()]);\r\n    const [error, setError] = useState({\r\n        status: false,\r\n        message: ''\r\n    });\r\n  \r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    });\r\n\r\n    const validate = () => {\r\n        const error = [];\r\n        for(let i = 0; i < inputRef.current.length; i++){\r\n            const valid = inputRef.current[i].current.validate();\r\n\r\n            if(!valid){\r\n                error.push(\"error\");\r\n            }\r\n        }\r\n\r\n        if(error.length > 0){\r\n            return false;\r\n        }\r\n\r\n        inputRef.current[0].current.doSubmit();\r\n        inputRef.current[1].current.doSubmit();\r\n\r\n        return true;\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n\r\n            if(!validate()){\r\n                return false;\r\n            }\r\n\r\n            const body = JSON.stringify(formData);\r\n            const config = {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }\r\n            const response = await API.post('/login', body, config);\r\n\r\n            if(response.data.status === \"error\"){\r\n                setError({\r\n                    status: true,\r\n                    message: \"Invalid login\"\r\n                });\r\n                return false;\r\n            }\r\n\r\n            dispatch({\r\n                type: 'LOGIN',\r\n                payload: response.data.data.chanel\r\n            });\r\n\r\n            setAuthToken(response.data.data.chanel.token);\r\n            router.push('/');\r\n           \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (name, value) => {\r\n        setError({\r\n            status: false\r\n        });\r\n\r\n        setFormData({\r\n            ...formData,\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    return(\r\n        <div className=\"landing-container\">\r\n            <div className=\"landing-welcome\">\r\n                <img src={title} alt =\"title\" />\r\n                <Link to=\"/register\" className=\"link\">\r\n                    <button className=\"button\">Sign Up</button>\r\n                </Link>\r\n            </div>\r\n\r\n            <div className=\"landing-form\">\r\n                <h1>Sign In</h1>\r\n                {error.status ? <Alert status=\"error-info\" message={error.message} />:null}\r\n                <form onSubmit={handleSubmit}>\r\n                    <InputField \r\n                        type=\"text\" \r\n                        placeholder=\"Email\" \r\n                        name=\"email\" \r\n                        onChange={(name, value) => handleInputChange(name, value)}\r\n                        autoComplete=\"off\"\r\n                        value={formData.email}\r\n                        ref={inputRef.current[0]}\r\n                        validation={['required', 'email']}\r\n            \r\n                    />\r\n                    <InputField \r\n                        type=\"password\" \r\n                        placeholder=\"Password\"\r\n                        name=\"password\"\r\n                        onChange={(name, value) => handleInputChange(name, value)}\r\n                        autoComplete=\"off\"\r\n                        value={formData.password}\r\n                        ref={inputRef.current[1]}\r\n                        validation={['required']}\r\n                        \r\n                    />\r\n                    <button className=\"button\">Sign In</button>\r\n                </form>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Login;","D:\\dumbways\\WaysHub\\client\\src\\pages\\Register.js",[],"D:\\dumbways\\WaysHub\\client\\src\\pages\\Subscribtion.js",[],"D:\\dumbways\\WaysHub\\client\\src\\route\\PrivateRoute.js",[],"D:\\dumbways\\WaysHub\\client\\src\\api\\PostVideo.js",[],["200","201"],"D:\\dumbways\\WaysHub\\client\\src\\component\\form\\SuccessInfo.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\navbar\\Navbar.js",["202","203"],"import {useState, useEffect} from 'react';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport './navbar.css';\r\nimport add_video_icon from '../../icon/add_video_icon.svg';\r\nimport add_video_icon_active from '../../icon/add_video_icon_active.svg';\r\nimport Dropdown from '../dropdown/Dropdown';\r\n\r\nconst Navbar = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n    const pathName = window.location.pathname;\r\n    const [isDropdown, setDropdown] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const handleDropdown = () => {\r\n        isDropdown? setDropdown(false):setDropdown(true);\r\n    }\r\n\r\n    const getUser = () => {\r\n        if(!currentUser){\r\n            setLoading(true);\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    },[currentUser])\r\n\r\n    useEffect(() => {\r\n        return history.listen(() => {\r\n            setDropdown(false);\r\n        })\r\n    }, [history]);\r\n\r\n    return(\r\n        <div className=\"navbar\">\r\n            <div className=\"search-bar\">\r\n                <input type=\"text\" placeholder=\"Search...\"/>\r\n            </div>\r\n            <div className=\"navbar-menu\">\r\n                <ul className=\"navbar-menu-list\">\r\n                    <li className=\"navbar-menu-item\">\r\n                        <Link to='/add' className=\"navbar-menu-link link\">\r\n                            <img src={pathName === '/add'? add_video_icon_active:add_video_icon} alt=\"add_video_icon\"/>\r\n                            <span className={pathName === '/add'? 'active':''}>Add Video</span>\r\n                        </Link>\r\n                    </li>\r\n\r\n                    <li className=\"navbar-menu-item\">\r\n                        <button className=\"navbar-menu-button\" onClick={handleDropdown}>\r\n                            {loading ? \"\":<img src={`http://localhost:5000/photo/${currentUser.photo}`} alt=\"add_video_icon\"/>}\r\n                        </button>\r\n                        {isDropdown ? <Dropdown/>: \"\"}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;",["204","205"],"D:\\dumbways\\WaysHub\\client\\src\\component\\channel\\ChannelDescription.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\form\\ErrorInfo.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\comment\\CommentList.js",["206"],"import './comment.css';\r\nimport menudots from '../../icon/menudots.png';\r\nimport DropdownComment from '../dropdown/DropdownComment';\r\nimport { useState, useEffect } from 'react';\r\nimport CommentModal from '../modal/CommentModal';\r\nimport CommentLoader from '../loader/CommentLoader';\r\n\r\nconst CommentList = (props) => {\r\n    const [showMenu, setShowMenu] = useState(false);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [sameUser, setSameUser] = useState(false);\r\n\r\n    const checkUser = () => {\r\n        setLoading(true);\r\n        const chanelId = props.data.chanel.id;\r\n        const currentUserId = props.currentUser.id;\r\n        \r\n        if(chanelId === currentUserId){\r\n            setSameUser(true)\r\n        } else {\r\n            setSameUser(false);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    \r\n    const showDropdown = () => {\r\n        if(showMenu){\r\n            setShowMenu(false);\r\n        } else {\r\n            setShowMenu(true);\r\n        }\r\n    }\r\n\r\n    const showModalDelete = () => {\r\n        setShowMenu(false);\r\n        setShowModal(true);\r\n    }\r\n\r\n    const closeModalDelete = () => {\r\n        setShowModal(false);\r\n    }\r\n\r\n    const deleteComment = async () => {\r\n        setLoading(true);\r\n        await props.deleteComment(props.data.id);\r\n        setShowModal(false);\r\n        setLoading(false);\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        checkUser();\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"comment-list\">\r\n            {showModal && \r\n                (\r\n                    <CommentModal \r\n                        closeModal={()=> {closeModalDelete()}}\r\n                        actionDelete={() => {deleteComment()}} \r\n                    />\r\n                )}\r\n            <div className=\"triangle-comment\"></div>\r\n            <img className=\"comment-thumbnail\" src={`http://localhost:5000/photo/${props.data.chanel.photo}`} alt=\"proifl\"/>\r\n            <div className=\"comment-body\">\r\n                {loading ? (\r\n                    <CommentLoader />\r\n                ):(\r\n                    <>\r\n                        <div className=\"comment\">\r\n                            <h2>{props.data.chanel.chanelName}</h2>\r\n                            <p>{props.data.comment}</p>\r\n                        </div>\r\n                        {sameUser && (\r\n                            <div className=\"comment-menu\">\r\n                                <button onClick={showDropdown}>\r\n                                    <img src={menudots} alt=\"menudots\" />\r\n                                </button>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </div>\r\n            {showMenu && (\r\n                <DropdownComment \r\n                    showModalDelete={() => {showModalDelete()}} \r\n                    show={showMenu} \r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentList;","D:\\dumbways\\WaysHub\\client\\src\\component\\form\\InputField.js",["207","208","209","210"],"import './form.css';\r\nimport ErrorInfo from './ErrorInfo';\r\n\r\nimport {Fragment, useState, forwardRef, useImperativeHandle, useEffect} from 'react';\r\n\r\n\r\nconst InputField = forwardRef((props, ref) => {\r\n    const [isFocus, setFocus] = useState(false);\r\n    const [submit, setSubmit] = useState(false);\r\n    const [error, setError] = useState({\r\n        status:false,\r\n        messages: \"\"\r\n    });\r\n    const [value, setValue] = useState(props.value);\r\n\r\n    \r\n    const handleInputChange = (event) => {\r\n        setValue(event.target.value);\r\n        setError({\r\n            ...error,\r\n            messages:\"\"\r\n        });\r\n        props.onChange(event.target.name, event.target.value);\r\n\r\n        setFocus(true);\r\n        \r\n    }\r\n\r\n    const doSubmit = () => {\r\n        setSubmit(true);\r\n    }\r\n\r\n    \r\n    const validate = () =>{\r\n        \r\n        for(let i = 0; i < props.validation.length; i++){\r\n            if(props.validation[i] === \"required\"){\r\n                if(!value || value === \"\"){\r\n                    setError({\r\n                        ...error,\r\n                        status:true,\r\n                        messages: `The ${props.placeholder} field must be filled !`\r\n                    });\r\n        \r\n                    return false;\r\n                }\r\n                \r\n            }\r\n\r\n            if(props.validation[i] === \"email\"){\r\n                const mailformat = /[a-z0-9\\._%+!$&*=^|~#%'`?{}/\\-]+@([a-z0-9\\-]+\\.){1,}([a-z]{2,16})/;\r\n                if(!value.match(mailformat)){\r\n                    setError({\r\n                        ...error,\r\n                        status:true,\r\n                        messages: `Not valid email !`\r\n                    });\r\n\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        setError({\r\n            status: false\r\n        });\r\n       \r\n        return true;\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        if(submit){\r\n            setValue('');\r\n            setSubmit(false);\r\n            setFocus(false);\r\n        }\r\n\r\n        if(isFocus){ \r\n            validate();\r\n        }\r\n    }, [value, submit]);\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            validate: () => validate(),\r\n            doSubmit: () => doSubmit()\r\n        }\r\n    })\r\n\r\n    return(\r\n        <Fragment>\r\n            <input \r\n                type={props.type} \r\n                placeholder={props.placeholder} \r\n                name={props.name} \r\n                onChange={(event)=>{handleInputChange(event)}}\r\n                autoComplete={props.autoComplete}\r\n                value={value}\r\n            />\r\n            {error.status && (<ErrorInfo messages={error.messages}/>)}\r\n        </Fragment>\r\n    )\r\n})\r\n\r\nexport default InputField;","D:\\dumbways\\WaysHub\\client\\src\\component\\form\\Alert.js",[],"D:\\dumbways\\WaysHub\\client\\src\\context\\AppContext.js",[],"D:\\dumbways\\WaysHub\\client\\src\\App.js",["211"],"import './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom';\r\n\r\n// component\r\n\r\nimport PrivateRoute from './route/PrivateRoute';\r\n\r\n// pages\r\nimport Login from './pages/Login';\r\nimport Register from './pages/Register';\r\nimport Home from './pages/Home';\r\nimport Subscribtion from './pages/Subscribtion';\r\nimport Detail from './pages/Detail';\r\nimport AddVideo from './pages/AddVideo';\r\nimport MyChannel from './pages/MyChannel';\r\nimport EditChannel from './pages/EditChannel';\r\nimport ContentCreator from './pages/ContentCreator';\r\n\r\nimport {API, setAuthToken} from './config/api';\r\nimport { AppContext } from './context/AppContext';\r\nimport { useContext, useEffect } from 'react';\r\n\r\nconst App = () => {\r\n  const [state, dispatch] = useContext(AppContext);\r\n\r\n  const loadUser = async () => {\r\n    \r\n    try {\r\n      \r\n\r\n      const token = localStorage.getItem('token');\r\n\r\n      if(!token){\r\n        return dispatch({\r\n          type: \"LOGOUT\"\r\n        });\r\n      }\r\n      setAuthToken(token);\r\n      \r\n      const response = await API.get('/auth');  \r\n\r\n      if(response.data.status !== \"success\"){\r\n          return dispatch({\r\n              type: \"AUTH_ERROR\"\r\n          });\r\n      }\r\n\r\n      dispatch({\r\n        type: \"LOAD_USER\",\r\n        payload: response.data.data.user\r\n      });\r\n\r\n    } catch(err){\r\n        console.log(err);\r\n        return dispatch({\r\n          type: \"AUTH_ERROR\",\r\n      });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadUser();\r\n  },[state.login]);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/register\" component={Register} />\r\n          <PrivateRoute exact path=\"/\" component={Home} />\r\n          <PrivateRoute exact path=\"/subscribtion\" component={Subscribtion} />\r\n          <PrivateRoute exact path=\"/detail/:id\" component={Detail} />\r\n          <PrivateRoute exact path=\"/add\" component={AddVideo} />\r\n          <PrivateRoute exact path=\"/my-channel\" component={MyChannel} />\r\n          <PrivateRoute exact path=\"/edit-channel\" component={EditChannel} />\r\n          <PrivateRoute exact path=\"/content-creator/:id\" component={ContentCreator} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["212","213"],"D:\\dumbways\\WaysHub\\client\\src\\pages\\ContentCreator.js",["214","215"],"import { useState, useEffect, useContext } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport '../App.css';\r\n\r\nimport ChannelVideo from '../component/channel/ChannelVideo';\r\n\r\nimport Sidebar from '../component/sidebar/Sidebar';\r\nimport Navbar from '../component//navbar/Navbar';\r\nimport VideoChanelLoader from '../component/loader/VideoChanelLoader';\r\nimport SubscribeModal from '../component/modal/SubscribeModal';\r\nimport EmptyVideo from '../component/video/EmptyVideo';\r\n\r\nimport { AppContext } from '../context/AppContext';\r\nimport { API } from '../config/api';\r\n\r\n\r\nconst ContentCreator = () => {\r\n    const [state, dispatch] = useContext(AppContext);\r\n    const [isSubscribe, setIsSubscribe] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [chanel, setChanel] = useState([]);\r\n    const [videos, setVideos] = useState([]);\r\n    const [subscribers, setSubscribers] = useState();\r\n    const { id } = useParams();\r\n    const router = useHistory();\r\n\r\n    const [modal, setModal] = useState({\r\n        status: false,\r\n        message: \"\"\r\n    });\r\n\r\n    const closeModal = () => {\r\n        setModal({\r\n            status: false,\r\n            message: \"\"\r\n        });\r\n    }\r\n\r\n    const getSubscribtion = async () => {\r\n        try {\r\n            const subscribtions = await API.get('/subscribe');\r\n\r\n            if(subscribtions.data.status === \"success\"){\r\n                dispatch({\r\n                    type: \"LOAD_SUBSCRIBTION\",\r\n                    payload: subscribtions.data.data\r\n                });\r\n                return;\r\n            }\r\n\r\n        } catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const getChanelById = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const currentUser = await JSON.parse(localStorage.getItem('user'));\r\n            const response = await API.get(`/chanel/${id}`);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setError(true);\r\n                return;\r\n            }\r\n\r\n            if(currentUser.id === response.data.data.chanel.id){\r\n                router.push('/my-channel');\r\n            }\r\n\r\n            const videosByChanelId = await API.get(`/chanel/${id}/videos`);\r\n            \r\n            if(videosByChanelId.data.status !== \"success\"){\r\n                setError(true);\r\n                return;\r\n            } \r\n\r\n            setChanel(response.data.data.chanel);\r\n            setVideos(videosByChanelId.data.data.videos);\r\n            setSubscribers(response.data.data.chanel.subscribers.length);\r\n           \r\n            setLoading(false);\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const doSubscribe = async () => {\r\n        try {\r\n\r\n            const body = {\r\n                chanelId: chanel.id\r\n            }\r\n\r\n            \r\n            const response = await API.post('/subscribe', body);\r\n\r\n            if(response.data.status === \"success\"){\r\n                setIsSubscribe(true);\r\n                setModal({\r\n                    status: true,\r\n                    message: \"Subscribe to this channel\"\r\n                });\r\n                setSubscribers(subscribers + 1);\r\n                const subscribe = [...state.subscribtion];\r\n                subscribe.push(response.data.data.subscribe.chanel);\r\n                const subsbribtionAfterSubscribe = {\r\n                    subscribtion: subscribe\r\n                }\r\n\r\n                dispatch({\r\n                    type: \"SUBSCRIBE\",\r\n                    payload: subsbribtionAfterSubscribe\r\n                });\r\n                return;\r\n            }\r\n            \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const doUnSubscribe = async () => {\r\n        try {\r\n\r\n            const chanelId = chanel.id;\r\n\r\n            const response = await API.delete(`/subscribe/${chanelId}`);\r\n\r\n            if(response.data.status === \"success\"){\r\n                setIsSubscribe(false);\r\n                setModal({\r\n                    status: true,\r\n                    message: \"Unsubscribe to this channel\"\r\n                });\r\n                setSubscribers(subscribers - 1);\r\n                const indexUnsubsribe = state.subscribtion.findIndex(subscribtion => subscribtion.id === parseInt(response.data.data.id));\r\n                \r\n                const subscribe = [...state.subscribtion];\r\n                subscribe.splice(indexUnsubsribe, 1);\r\n                const subsbribtionAfterUnSubscribe = {\r\n                    subscribtion: subscribe\r\n                }\r\n\r\n                dispatch({\r\n                    type: \"UNSUBSCRIBE\",\r\n                    payload: subsbribtionAfterUnSubscribe\r\n                });\r\n                return;\r\n            }\r\n            \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const checkSubscribe = async () => {\r\n        try {\r\n            const body = {\r\n                chanelId: chanel.id\r\n            }\r\n\r\n            const response = await API.post('/check-subscribe', body);\r\n\r\n            if(response.data.status === \"success\"){\r\n                setIsSubscribe(true);\r\n                return\r\n                \r\n            }\r\n\r\n            setIsSubscribe(false);\r\n            return;\r\n            \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }   \r\n\r\n    useEffect(() => {\r\n        getChanelById();\r\n        getSubscribtion();\r\n        return () => {\r\n            setModal({\r\n                status: false,\r\n                message: \"\"\r\n            })\r\n        }\r\n    }, [id]);\r\n\r\n    \r\n    useEffect(() => {\r\n        checkSubscribe();\r\n    }, [chanel.id])\r\n     \r\n    return(\r\n        <div className=\"wrapper\">\r\n            <Sidebar />\r\n            <div className=\"container\">\r\n                <Navbar />\r\n                {modal.status && (<SubscribeModal message={modal.message} closeModal={() => closeModal()} />)}\r\n                \r\n\r\n                {error ? (\r\n                    <h1>Server Error</h1>\r\n                ): loading ? (\r\n                    <VideoChanelLoader />\r\n                ):(\r\n                    <>\r\n                        <div className=\"cover\">\r\n                            <img src={`http://localhost:5000/thumbnail/${chanel.thumbnail}`} alt=\"cover\" />\r\n                        </div>\r\n                        <div className=\"channel-wrapper\">\r\n                            <div className=\"channel-header border-bottom\">\r\n                                <img src={`http://localhost:5000/photo/${chanel.photo}`} alt=\"foto profil\"/>\r\n                                <div className=\"channel-username\">\r\n                                    <span>{chanel.chanelName}</span>\r\n                                    <span>{subscribers} Subscribers</span>\r\n                                </div>\r\n                                <div className=\"button-wrapper\">\r\n                                {!isSubscribe ? (\r\n                                    <button className=\"btn-subscribe\" onClick={doSubscribe}>Subscribe</button>\r\n                                ):(\r\n                                    <button className=\"btn-unsubscribe\" onClick={doUnSubscribe}>Unsubscribe</button>\r\n                                )}\r\n                                </div>\r\n                            </div>\r\n                            {videos.length > 0? (\r\n                                 <ChannelVideo videos={videos} edit={false} />\r\n                            ): <EmptyVideo myChannel={false} />}\r\n                        </div>\r\n                    </>\r\n                )}\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ContentCreator;","D:\\dumbways\\WaysHub\\client\\src\\config\\api.js",[],"D:\\dumbways\\WaysHub\\client\\src\\api\\SubscribtionVideo.js",[],["216","217"],"D:\\dumbways\\WaysHub\\client\\src\\component\\card\\Card.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\video\\Video.js",["218"],"import './video.css';\r\nimport {Link} from 'react-router-dom';\r\nimport ReactPlayer from 'react-player';\r\n\r\nimport Comment from '../comment/Comment';\r\n\r\nimport number_views from '../../icon/number_views.svg';\r\nimport refresh_icon from '../../icon/refresh_icon.svg';\r\nimport SubscribeModal from '../modal/SubscribeModal';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst Video = (props) => {\r\n    const [isSubscribe, setIsSubscribe] = useState(false);\r\n    const [isSameChanel, setIsSameChanel] = useState(false);\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n    const [modal, setModal] = useState({\r\n        status: false,\r\n        message: \"\"\r\n    });\r\n\r\n    const closeModal = () => {\r\n        setModal({\r\n            status: false,\r\n            message: \"\"\r\n        });\r\n    }\r\n\r\n    \r\n    const doSubscribe = () => {\r\n        props.subscribe();\r\n        setIsSubscribe(true);\r\n        setModal({\r\n            status: true,\r\n            message: \"Subscribe to this channel\"\r\n        });\r\n    }\r\n\r\n    const doUnSubscribe = () => {\r\n        props.unSubscribe();\r\n        setIsSubscribe(false);\r\n        setModal({\r\n            status: true,\r\n            message: \"Unsubscribe to this channel\"\r\n        });\r\n    }\r\n\r\n    const checkSubscribe = async () => {\r\n        const subscribe = await props.checkSubscribe();\r\n\r\n        setIsSubscribe(subscribe);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(currentUser.id === props.data.chanel.id){\r\n            setIsSameChanel(true);\r\n        }\r\n       checkSubscribe();\r\n       return () => {\r\n           setModal({\r\n               status: false,\r\n               message: \"\"\r\n           });\r\n       }\r\n    },[]);\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            {modal.status && (<SubscribeModal message={modal.message} closeModal={() => closeModal()} />)}\r\n            <div className=\"video-wrapper\">\r\n                <ReactPlayer\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    className=\"video-player\"\r\n                    playing\r\n                    url={`http://localhost:5000/video/${props.data.video}`}\r\n                    controls={true}\r\n                />\r\n                <h1 className=\"video-title\">{props.data.title}</h1>\r\n                <span>\r\n                    <img src={number_views} alt=\"number_views\" /> {props.data.viewCount}\r\n                </span>\r\n                <span>\r\n                    <img src={refresh_icon} alt=\"refresh_icon\" /> {new Date(props.data.createdAt).toLocaleDateString()}\r\n                </span>\r\n            </div>\r\n            <div className=\"video-description-wrapper\">\r\n                <div className=\"video-description-header\">\r\n                    <img src={`http://localhost:5000/photo/${props.data.chanel.photo}`} alt=\"foto profil\"/>\r\n                    <div className=\"video-username\">\r\n                        <Link to={`/content-creator/${props.data.chanel.id}`} className=\"link\">\r\n                            <span className=\"content-creator-username\">{props.data.chanel.chanelName}</span>\r\n                        </Link>\r\n                        <span className=\"count-subscriber\">{props.subscribers} Subscriber</span>\r\n                    </div>\r\n                    {!isSameChanel && (\r\n                        <div className=\"button-wrapper\">\r\n                            {!isSubscribe ? (\r\n                                <button className=\"btn-subscribe\" onClick={doSubscribe}>Subscribe</button>\r\n                            ):(\r\n                                <button className=\"btn-unsubscribe\" onClick={doUnSubscribe}>Unsubscribe</button>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"video-description-body\">\r\n                    <p>{props.data.description}</p>\r\n                    <button className=\"show-more\">Show More</button>\r\n                </div>\r\n                <Comment\r\n                    currentUser={props.currentUser} \r\n                    comments={props.comments}\r\n                    addComment={async (formData) => {\r\n                        await props.addComment(formData);\r\n                    }}\r\n                    deleteComment={async (commentId) => {\r\n                        await props.deleteComment(commentId);\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Video;","D:\\dumbways\\WaysHub\\client\\src\\component\\form\\TextAreaField.js",["219","220","221","222"],"import './form.css';\r\n\r\nimport ErrorInfo from './ErrorInfo';\r\nimport {Fragment, useState, forwardRef, useImperativeHandle, useEffect} from 'react';\r\n\r\nconst TextAreaField = forwardRef((props,ref) => {\r\n    const [isFocus, setFocus] = useState(false);\r\n    const [submit, setSubmit] = useState(false);\r\n\r\n    const [error, setError] = useState({\r\n        status:false,\r\n        messages: \"\"\r\n    });\r\n    const [value, setValue] = useState(props.value);\r\n\r\n    \r\n    const handleInputChange = (event) => {\r\n        setValue(event.target.value);\r\n        setError({\r\n            messages:\"\"\r\n        });\r\n        props.onChange(event.target.name, event.target.value);\r\n        setFocus(true);\r\n    }\r\n\r\n    const doSubmit = () => {\r\n        setSubmit(true);\r\n    }\r\n    \r\n    const validate = () =>{\r\n        for(let i = 0; i < props.validation.length; i++){\r\n            if(props.validation[i] === \"required\"){\r\n                if(!value || value === \"\"){\r\n                    setError({\r\n                        ...error,\r\n                        status:true,\r\n                        messages: `The ${props.placeholder} field must be filled !`\r\n                    });\r\n        \r\n                    return false;\r\n                } \r\n            }\r\n\r\n            if(props.validation[i] === \"email\"){\r\n                const mailformat = /[a-z0-9\\._%+!$&*=^|~#%'`?{}/\\-]+@([a-z0-9\\-]+\\.){1,}([a-z]{2,16})/;\r\n                if(!value.match(mailformat)){\r\n                    setError({\r\n                        ...error,\r\n                        status:true,\r\n                        messages: `Not valid email !`\r\n                    });\r\n        \r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        setError({\r\n            status: false\r\n        });\r\n        return true;\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(submit){\r\n            setValue('');\r\n            setSubmit(false);\r\n            setFocus(false);\r\n        }\r\n\r\n        if(isFocus){\r\n            validate();\r\n        }\r\n    }, [value, submit]);\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            validate: () => validate(),\r\n            doSubmit: () => doSubmit()\r\n        }\r\n    })\r\n\r\n\r\n    return(\r\n        <Fragment>\r\n            <textarea\r\n                placeholder={props.placeholder} \r\n                name={props.name} \r\n                onChange={(event) => {handleInputChange(event)}}\r\n                autoComplete={props.autoComplete}\r\n                value={value}\r\n            ></textarea>\r\n            {error.status && (<ErrorInfo messages={error.messages}/>)}\r\n        </Fragment>\r\n    )\r\n})\r\n\r\nexport default TextAreaField;","D:\\dumbways\\WaysHub\\client\\src\\pages\\Detail.js",["223"],"import { useState, useEffect, useContext } from 'react';\r\nimport {useParams} from 'react-router-dom';\r\n\r\n// css\r\nimport '../App.css';\r\n\r\n// component\r\nimport Video from '../component/video/Video';\r\nimport Card from '../component/card/Card';\r\nimport Sidebar from '../component/sidebar/Sidebar';\r\nimport Navbar from '../component//navbar/Navbar';\r\nimport PageLoader from '../component/loader/PageLoader';\r\n\r\nimport { AppContext } from '../context/AppContext';\r\n\r\nimport { API } from '../config/api';\r\n\r\nconst Detail = () => {\r\n    const [state, dispatch] = useContext(AppContext);\r\n    const { id } = useParams();\r\n\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [video, setVideo] = useState();\r\n    const [recomendationVideos, setRecomendationVideos] = useState([]);\r\n    const [channel, setChanel] = useState();\r\n    const [comments, setComments] = useState([]);\r\n    const [subscribers, setSubscribers] = useState();\r\n    const [maxShow, setMaxShow] = useState(3);\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const randomIndex = (max) => {\r\n        const randomNumber = [];\r\n\r\n        for(let i = 0; i < max; i++){\r\n            let newNumber = Math.floor(Math.random() * max);\r\n            \r\n            const checkNumber = randomNumber.indexOf(newNumber);\r\n            \r\n            if(checkNumber < 0){\r\n                randomNumber.push(newNumber);\r\n            } else {\r\n                i--;\r\n            }\r\n            \r\n        }\r\n        return randomNumber;\r\n        \r\n    }\r\n\r\n    const getVideos = async () => {\r\n        try {\r\n            const response = await API.get('/videos');\r\n            const numbers = randomIndex(response.data.data.videos.length);\r\n            const randomVideos = []\r\n            numbers.forEach(number => {\r\n                randomVideos.push(response.data.data.videos[number]);\r\n            });\r\n            setRecomendationVideos(randomVideos);\r\n\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const showMore = () => {\r\n        setMaxShow(maxShow + 2);\r\n    }\r\n    \r\n\r\n    const getSubscribtion = async () => {\r\n        try {\r\n            const subscribtions = await API.get('/subscribe');\r\n\r\n            if(subscribtions.data.status === \"success\"){\r\n                dispatch({\r\n                    type: \"LOAD_SUBSCRIBTION\",\r\n                    payload: subscribtions.data.data\r\n                });\r\n                return;\r\n            }\r\n\r\n        } catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n    const getVideoById = async () => {\r\n        try {\r\n            setLoading(true);\r\n\r\n            const response = await API.get(`/video/${id}`);\r\n\r\n            const chanelId = response.data.data.video.chanel.id;\r\n\r\n            const chanelById = await API.get(`/chanel/${chanelId}`);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setError(true);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            if(chanelById.data.status !== \"success\"){\r\n                setError(true);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            setChanel(chanelById.data.data.chanel);\r\n            setSubscribers(chanelById.data.data.chanel.subscribers.length);\r\n            setVideo(response.data.data.video);\r\n            setComments(response.data.data.video.comments.reverse());\r\n            setLoading(false);\r\n\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const checkSubscribe = async () => {\r\n        try {\r\n            const body = {\r\n                chanelId: video.chanel.id\r\n            }\r\n\r\n\r\n            const response = await API.post('/check-subscribe', body);\r\n\r\n            if(response.data.status === \"success\"){\r\n                return true;\r\n                \r\n            }\r\n\r\n            return false;\r\n            \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const doSubscribe = async () => {\r\n        try {\r\n\r\n            const body = {\r\n                chanelId: video.chanel.id\r\n            }\r\n\r\n            const response = await API.post('/subscribe', body);\r\n\r\n            if(response.data.status === \"success\"){\r\n                setSubscribers(subscribers + 1);\r\n                const subscribe = [...state.subscribtion];\r\n                subscribe.push(response.data.data.subscribe.chanel);\r\n                const subsbribtionAfterSubscribe = {\r\n                    subscribtion: subscribe\r\n                }\r\n\r\n                dispatch({\r\n                    type: \"SUBSCRIBE\",\r\n                    payload: subsbribtionAfterSubscribe\r\n                });\r\n\r\n                \r\n                return;\r\n            }\r\n\r\n            return;\r\n            \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const doUnSubscribe = async () => {\r\n        try {\r\n\r\n            const chanelId = video.chanel.id;\r\n\r\n            const response = await API.delete(`/subscribe/${chanelId}`);\r\n\r\n            if(response.data.status === \"success\"){\r\n                const indexUnsubsribe = state.subscribtion.findIndex(subscribtion => subscribtion.id === parseInt(response.data.data.id));\r\n                \r\n                const subscribe = [...state.subscribtion];\r\n                subscribe.splice(indexUnsubsribe, 1);\r\n                const subsbribtionAfterUnSubscribe = {\r\n                    subscribtion: subscribe\r\n                }\r\n\r\n                dispatch({\r\n                    type: \"UNSUBSCRIBE\",\r\n                    payload: subsbribtionAfterUnSubscribe\r\n                });\r\n\r\n                setSubscribers(subscribers- 1);\r\n                return;\r\n            }\r\n\r\n            return;\r\n            \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const addComment = async (formData) => {\r\n        try {  \r\n            const videoId = video.id \r\n            const response = await API.post(`/video/${videoId}/comment`, formData);\r\n\r\n            if(response.data.status === \"success\"){\r\n                setComments([\r\n                    response.data.data.comment,\r\n                    ...comments\r\n                    \r\n                ]);\r\n            }\r\n\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const deleteComment = async (commentId) => {\r\n        try {\r\n            const videoId = video.id;\r\n\r\n            const response = await API.delete(`/video/${videoId}/comment/${commentId}`);\r\n\r\n            if(response.data.status === \"success\"){\r\n                const indexDeletedComment = comments.findIndex(comment => comment.id === commentId);\r\n                const commentsAfterDelete = [...comments];\r\n                commentsAfterDelete.splice(indexDeletedComment, 1);\r\n                setComments(commentsAfterDelete);\r\n                return;\r\n            }\r\n            \r\n\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getSubscribtion();\r\n        getVideoById();\r\n        getVideos();\r\n        \r\n    },[id]);\r\n\r\n    \r\n    return(\r\n        <div className=\"wrapper\">\r\n            <Sidebar />\r\n            <div className=\"container\">\r\n                <Navbar />\r\n                    {error ? (\r\n                        <h1>Server Error</h1>\r\n                    ): loading ? (\r\n                        <PageLoader />\r\n                    ):(\r\n                        \r\n                        <div className=\"video-container\">\r\n                            <Video \r\n                                currentUser={currentUser}\r\n                                subscribers={subscribers}\r\n                                subscribe={() => doSubscribe()}\r\n                                unSubscribe = {() => doUnSubscribe()} \r\n                                data={video}\r\n                                chanel={channel}\r\n                                checkSubscribe={() => checkSubscribe()}\r\n                                comments={comments}\r\n                                addComment={async (formData) => await addComment(formData)}\r\n                                deleteComment={async (commentId) => await deleteComment(commentId)}\r\n                            />\r\n                            <div className=\"recomendation-video\">\r\n                                {recomendationVideos.map(recomendVideo => {\r\n                                    return (recomendationVideos.indexOf(recomendVideo) > maxShow) ? (null):\r\n                                    (recomendVideo.id === video.id)? (null): (\r\n                                    <Card \r\n                                            key={recomendVideo.id} \r\n                                            data={recomendVideo}\r\n                                            edit={false} \r\n                                        />\r\n                                    )\r\n                                    \r\n                                })}\r\n                                {maxShow > recomendationVideos.length ? \r\n                                        null\r\n                                    :\r\n                                        <button onClick={showMore} className=\"show-more-videos\">Show More</button>}\r\n                            </div>\r\n                           \r\n                        </div>\r\n                    )}           \r\n            </div>\r\n        </div>\r\n        \r\n   )\r\n}\r\n\r\nexport default Detail;","D:\\dumbways\\WaysHub\\client\\src\\pages\\MyChannel.js",["224"],"import { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport ChannelHeader from '../component/channel/ChannelHeader';\r\nimport ChannelDescription from '../component/channel/ChannelDescription';\r\nimport ChannelVideo from '../component/channel/ChannelVideo';\r\nimport Sidebar from '../component/sidebar/Sidebar';\r\nimport Navbar from '../component/navbar/Navbar';\r\nimport VideoChanelLoader from '../component/loader/VideoChanelLoader';\r\nimport EmptyVideo from '../component/video/EmptyVideo';\r\n\r\nimport { API } from '../config/api';\r\n\r\nconst MyChannel = () => {\r\n    const [isVideo, setIsVideo] = useState(true);\r\n\r\n    const [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [chanel, setChanel] = useState([]);\r\n    const [videos, setVideos] = useState([]);\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const deleteVideo = async (chanelId) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await API.delete(`/video/${chanelId}`);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setLoading(false);\r\n                console.log(response.data.error.message);\r\n                return;\r\n            }\r\n            getChanelById();\r\n\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    \r\n\r\n    const getChanelById = async () => {\r\n        try {\r\n            setLoading(true);\r\n\r\n            const response = await API.get(`/chanel/${currentUser.id}`);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setLoading(false);\r\n                setError(true);\r\n                return;\r\n            }\r\n            const videosByChanelId = await API.get(`/chanel/${currentUser.id}/videos`);\r\n            \r\n            if(videosByChanelId.data.status !== \"success\"){\r\n                setLoading(false);\r\n                setError(true);\r\n                return;\r\n            }\r\n    \r\n\r\n            setChanel(response.data.data.chanel);\r\n            setVideos(videosByChanelId.data.data.videos);\r\n\r\n           \r\n            setLoading(false);\r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getChanelById();\r\n    }, []);\r\n\r\n    const handleChannel = (status) => {\r\n        setIsVideo(status)\r\n    }\r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <Sidebar />\r\n            <div className=\"container\">\r\n                <Navbar />\r\n                {error ? (\r\n                    <h1>Server Error</h1>\r\n                ): loading ? (\r\n                    <VideoChanelLoader />\r\n                ):(\r\n                    <>\r\n                        <div className=\"cover\">\r\n                            <img src={`http://localhost:5000/thumbnail/${chanel.thumbnail}`} alt=\"cover\" />\r\n                        </div>\r\n                        <div className=\"channel-wrapper\">\r\n                            <ChannelHeader current={(status) => handleChannel(status)} data={chanel}/>\r\n                            {(isVideo)? \r\n                                (videos.length > 0 ? \r\n                                    (\r\n                                        <ChannelVideo \r\n                                            actionDelete={(chanelId => deleteVideo(chanelId))} \r\n                                            videos={videos}\r\n                                            edit={true} \r\n                                        />\r\n                                    ): (<EmptyVideo myChannel={true} />)\r\n                                ):\r\n                                (<ChannelDescription data={chanel} />)\r\n                            }\r\n                        </div>\r\n                    </>\r\n                )}\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default MyChannel;","D:\\dumbways\\WaysHub\\client\\src\\pages\\EditChannel.js",["225"],"import React, { useEffect, useState } from 'react';\r\nimport edit_channel_icon from '../icon/edit_channel_icon.svg';\r\n\r\nimport Sidebar from '../component/sidebar/Sidebar';\r\nimport Navbar from '../component//navbar/Navbar';\r\nimport Preview from '../component/preview/Preview';\r\nimport Alert from '../component/form/Alert';\r\nimport ButtonLoader from '../component/loader/ButtonLoader';\r\nimport SuccessInfo from '../component/form/SuccessInfo';\r\nimport { API } from '../config/api';\r\n\r\nconst EditChannel = () => {\r\n    const [cover, setCover] = useState('Thumbnail');\r\n    const [photo, setPhoto] = useState('Upload Photo');\r\n    const [preview, setPreview] = useState({});\r\n    const [success, setSuccess] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState({\r\n        status: false,\r\n        message: \"\"\r\n    });\r\n\r\n    const reader = new FileReader();\r\n\r\n    \r\n\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        chanelName: \"\",\r\n        description: \"\",\r\n        thumbnail: \"\",\r\n        photo: \"\"\r\n    });\r\n\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const coverFile = React.useRef();\r\n    const photoFile = React.useRef();\r\n\r\n\r\n    const handleCoverInputClick = () => {\r\n        setError({\r\n            ...error,\r\n            status: false\r\n        });\r\n        setSuccess(false);\r\n        coverFile.current.click();\r\n    }\r\n\r\n    const handleCoverInputChange = (event) => {\r\n        if(event.target.files[0]){\r\n            setCover(event.target.files[0].name);\r\n            setFormData({\r\n                ...formData,\r\n                [event.target.name] : event.target.files[0]\r\n            });\r\n\r\n            \r\n            reader.readAsDataURL(event.target.files[0])\r\n            reader.onloadend = () => {\r\n                setPreview({\r\n                    ...preview, \r\n                    thumbnail: reader.result\r\n                });\r\n        }\r\n            \r\n        } else {\r\n            setCover('Thumbnail');\r\n        }\r\n        \r\n    }\r\n\r\n    const handlePhotoInputClick = () => {\r\n        setError({\r\n            ...error,\r\n            status: false\r\n        });\r\n        setSuccess(false);\r\n        photoFile.current.click();\r\n    }\r\n\r\n    const handlePhotoInputChange = (event) => {\r\n        if(event.target.files[0]){\r\n            setPhoto(event.target.files[0].name);\r\n            setFormData({\r\n                ...formData,\r\n                [event.target.name] : event.target.files[0]\r\n            })\r\n\r\n            reader.readAsDataURL(event.target.files[0])\r\n            reader.onloadend = () => {\r\n                setPreview({\r\n                    ...preview,\r\n                    photo: reader.result\r\n                });\r\n        }\r\n\r\n           \r\n        } else {\r\n            setPhoto('Upload Photo');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setSuccess(false);\r\n        setError({\r\n            ...error,\r\n            status: false\r\n        });\r\n        setFormData({\r\n            ...formData,\r\n            [event.target.name] : event.target.value\r\n        });\r\n    }\r\n\r\n    const getChanelById = async () => {\r\n        try {\r\n            \r\n            const response = await API.get(`/chanel/${currentUser.id}`);\r\n\r\n            if(response.status !== 200){\r\n                setError(true);\r\n                return;\r\n            }\r\n\r\n            const chanel = response.data.data.chanel;\r\n\r\n            setFormData({\r\n                ...formData,\r\n                email: chanel.email,\r\n                password: chanel.password,\r\n                chanelName: chanel.chanelName,\r\n                description: chanel.description,           \r\n            });\r\n\r\n\r\n            setPreview({\r\n                ...preview,\r\n                thumbnail: `http://localhost:5000/thumbnail/${chanel.thumbnail}`,\r\n                photo: `http://localhost:5000/photo/${chanel.photo}`\r\n            });\r\n    \r\n\r\n            \r\n        } catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setError({\r\n            ...error,\r\n            status: false\r\n        });\r\n        setSuccess(false);\r\n        setLoading(true);\r\n\r\n        const body = new FormData();\r\n        body.append('email', formData.email );\r\n        body.append('password', formData.password);\r\n        body.append('chanelName', formData.chanelName);\r\n        body.append('description', formData.description);\r\n        \r\n        if(coverFile.current.files[0]){\r\n            body.append('thumbnail', formData.thumbnail);\r\n        }\r\n\r\n        if(photoFile.current.files[0]){\r\n            body.append('photo', formData.photo);\r\n        }\r\n\r\n        const config = {\r\n            headers: {\r\n              \"content-type\": \"multipart/form-data\",\r\n            },\r\n        };\r\n\r\n        try {\r\n            const response = await API.put(`/chanel/${currentUser.id}`, body, config);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setSuccess(false);\r\n                \r\n                setError({\r\n                    ...error,\r\n                    status: true,\r\n                    message: response.data.error.message\r\n                });\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            setLoading(false);\r\n            setSuccess(true);\r\n            \r\n           \r\n        } catch(err){\r\n            setLoading(false);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getChanelById();\r\n        \r\n    },[]);\r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <Sidebar />\r\n            <div className=\"container\">\r\n                <Navbar />\r\n                <div className=\"form-container\">\r\n                    <h1>Edit Channel</h1>\r\n                    {success && (<SuccessInfo message=\"Channel has been changed successfully\" />)}\r\n                    {error.status && (<Alert status=\"error-info\" message={error.message} />)}\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"inline-input\">\r\n                            <input \r\n                                type=\"text\" \r\n                                placeholder=\"Name Channel\" \r\n                                name=\"chanelName\" \r\n                                value={formData.chanelName} \r\n                                onChange={handleChange}\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <div className=\"file-upload\" onClick={handleCoverInputClick}>\r\n                                <label>{cover}</label>\r\n                                <input \r\n                                    type=\"file\" \r\n                                    ref={coverFile} \r\n                                    onChange={handleCoverInputChange} \r\n                                    name=\"thumbnail\"\r\n                                />\r\n                                <img src={edit_channel_icon} alt=\"icon\"/>    \r\n                            </div>\r\n                        </div>\r\n                        <textarea \r\n                            placeholder=\"Description\" \r\n                            name=\"description\" \r\n                            value={formData.description}\r\n                            onChange={handleChange}\r\n                        >\r\n                        </textarea>\r\n                        <div className=\"input-file-container\">\r\n                            <div className=\"input-file\" onClick={handlePhotoInputClick}>\r\n                                <label>{photo}</label>\r\n                                <input type=\"file\" ref={photoFile} onChange={handlePhotoInputChange} name=\"photo\"/>\r\n                                <img src={edit_channel_icon} alt=\"icon\"/>    \r\n                            </div>\r\n                        </div>\r\n                        <Preview data={preview} />\r\n                        <button className=\"button\">\r\n                            {loading ? (\r\n                                <ButtonLoader />\r\n                            ): (\"Save\")}\r\n                        </button>\r\n                        \r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default EditChannel;","D:\\dumbways\\WaysHub\\client\\src\\component\\sidebar\\Sidebar.js",["226","227"],"import './sidebar.css';\r\nimport {Link} from 'react-router-dom';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport Icon from '../../icon/icon.svg';\r\nimport home_icon from '../../icon/home_icon.svg';\r\nimport home_icon_active from '../../icon/home_icon_active.svg';\r\nimport subscription_icon from '../../icon/subscription_icon.svg';\r\nimport subscription_icon_active from '../../icon/subscription_icon_active.svg';\r\n\r\nimport { API } from '../../config/api';\r\nimport {AppContext} from '../../context/AppContext';\r\n\r\n\r\nconst Sidebar = () => {\r\n    const pathName = window.location.pathname;\r\n    const [state, dispatch] = useContext(AppContext);\r\n\r\n    const getSubscribtion = async () => {\r\n        try {\r\n            const subscribtions = await API.get('/subscribe');\r\n\r\n            if(subscribtions.data.status === \"success\"){\r\n                dispatch({\r\n                    type: \"LOAD_SUBSCRIBTION\",\r\n                    payload: subscribtions.data.data\r\n                });\r\n                return;\r\n            }\r\n\r\n        } catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getSubscribtion();\r\n    },[])\r\n\r\n    return(\r\n        <div className=\"sidebar\">\r\n            <img src={Icon} alt=\"icon\" className=\"sidebar-logo\"/>\r\n            <ul className=\"sidebar-list\">\r\n                <li className=\"sidebar-list-item\">\r\n                    <Link to=\"/\" className=\"sidebar-link\">\r\n                        <img src={pathName === '/'? home_icon_active:home_icon} alt=\"home_icon\" />\r\n                        <span className={pathName==='/'? \"active\":\"\"}>Home</span>\r\n                    </Link>\r\n                </li>\r\n                <li className=\"sidebar-list-item\">\r\n                    <Link to=\"/subscribtion\" className=\"sidebar-link\">\r\n                        <img src={pathName === '/subscribtion'? subscription_icon_active:subscription_icon} alt=\"subscription_icon\" />\r\n                        <span className={pathName === '/subscribtion'? \"active\":\"\"}>Subscribtion</span>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n\r\n            {state.subscribtion.length > 0 && (\r\n                <h1 className=\"sidebar-list-title\">Channel</h1>\r\n            )}\r\n\r\n            <ul className=\"sidebar-list\">\r\n                {state.subscribtion.map(subscribtion => {\r\n                    return (\r\n                        <li className=\"sidebar-list-item\" key={subscribtion.id}>\r\n                            <Link to={`/content-creator/${subscribtion.id}`} className=\"sidebar-link\">\r\n                                <img src={`http://localhost:5000/photo/${subscribtion.photo}`} alt=\"user_channel_icon\" className=\"sidebar-photo-profile\" />\r\n                                <span className=\"sidebar-username\">{subscribtion.chanelName}</span>\r\n                            </Link>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n\r\n            {state.subscribtion.length > 5 && (\r\n                <button className=\"show-more\">Show More</button>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;",["228","229"],"D:\\dumbways\\WaysHub\\client\\src\\component\\dropdown\\Dropdown.js",["230"],"import {Link} from 'react-router-dom';\r\nimport {useContext} from 'react';\r\nimport {AppContext} from '../../context/AppContext';\r\n\r\nimport './dropdown.css';\r\nimport user_icon from '../../icon/user_icon.svg';\r\nimport user_icon_active from '../../icon/user_icon_active.svg';\r\nimport logout_icon from '../../icon/logout_icon.svg';\r\n\r\nconst Dropdown = () => {\r\n    const [state, dispatch] = useContext(AppContext);\r\n\r\n    const pathName = window.location.pathname;\r\n\r\n    const handleClick = () => {\r\n        dispatch({\r\n            type:\"LOGOUT\"\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"dropdown-wrapper\">\r\n            <div className=\"polygon\"></div>\r\n            <ul className=\"dropdown-list\">\r\n                <li className=\"dropdown-item\">\r\n                    <Link to=\"/my-channel\" className=\"dropdown-link link\">\r\n                        <img src={pathName === '/my-channel'? user_icon_active:user_icon} alt=\"user icon\" />\r\n                        <span className={pathName === '/my-channel'? 'active':''}>My Channel</span>\r\n                    </Link>\r\n                </li>\r\n                <li className=\"dropdown-item\">\r\n                    <div className=\"dropdown-link\" onClick={handleClick}>\r\n                        <img src={logout_icon} alt=\"logout icon\" />\r\n                        <span>Logout</span>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dropdown;",["231","232"],"D:\\dumbways\\WaysHub\\client\\src\\route\\AuthUser.js",["233"],"import { AppContext } from '../context/AppContext';\r\nimport { useContext} from 'react';\r\nimport { API , setAuthToken } from '../config/api';\r\n\r\n\r\n\r\nconst AuthUser = async () => {\r\n    const [state, dispatch] = useContext(AppContext);\r\n    try {\r\n        if(localStorage.token){\r\n            setAuthToken(localStorage.token);\r\n        }\r\n\r\n        const response = await API.get('/auth');\r\n            \r\n        if(response.data.status === \"success\"){\r\n            dispatch({\r\n                type: \"AUTH_USER\",\r\n                payload: response.data.data.user\r\n            });\r\n        }\r\n  \r\n    } catch(err){\r\n        console.log(err)\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default AuthUser;","D:\\dumbways\\WaysHub\\client\\src\\component\\channel\\ChannelVideo.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\comment\\Comment.js",[],"D:\\dumbways\\WaysHub\\client\\src\\pages\\AddVideo.js",["234"],"import '../App.css';\r\n\r\nimport React, { useState } from 'react';\r\nimport attach_thumbnail from '../icon/attach_thumbnail.png';\r\nimport add_video_icon_active from '../icon/add_video_icon_active.svg';\r\n\r\nimport Sidebar from '../component/sidebar/Sidebar';\r\nimport Navbar from '../component//navbar/Navbar';\r\n\r\nimport Alert from '../component/form/Alert';\r\nimport ButtonLoader from '../component/loader/ButtonLoader';\r\nimport SuccessInfo from '../component/form/SuccessInfo';\r\n\r\nimport { API } from '../config/api';\r\n\r\nconst AddVideo = () => {\r\n    const [thumbnail, setThumbnail] = useState('Attach Thumbnail');\r\n    const [video, setVideo] = useState('Upload Video');\r\n\r\n    const thumbnailFile = React.useRef();\r\n    const videoFile = React.useRef();\r\n\r\n    const [success, setSuccess] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState({\r\n        status: false,\r\n        message: \"\"\r\n    });\r\n\r\n    const [formData, setFormData] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        thumbnail: \"\",\r\n        video: \"\"\r\n    });\r\n\r\n    const currentUser = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const handleThumbnailInputClick = () => {\r\n        thumbnailFile.current.click();\r\n    }\r\n\r\n    const handleThumbnailInputChange = (event) => {\r\n        \r\n        if(event.target.files[0]){\r\n            setThumbnail(event.target.files[0].name);\r\n            setFormData({\r\n                ...formData,\r\n                [event.target.name] : event.target.files[0]\r\n            })\r\n        } else {\r\n            setThumbnail('Attach Thumbnail');\r\n        }\r\n    }\r\n\r\n    const handleVideoInputClick = () => {\r\n        videoFile.current.click();\r\n    }\r\n\r\n    const handleVideoInputChange = (event) => {\r\n        if(event.target.files[0]){\r\n            setVideo(event.target.files[0].name);\r\n            setFormData({\r\n                ...formData,\r\n                [event.target.name] : event.target.files[0]\r\n            })\r\n        } else {\r\n            setVideo('Upload Video');\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setSuccess(false);\r\n        setError({\r\n            ...error,\r\n            status: false\r\n        });\r\n        setFormData({\r\n            ...formData,\r\n            [event.target.name] : event.target.value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = async (event)=>{\r\n        event.preventDefault();\r\n        setError({\r\n            ...error,\r\n            status: false\r\n        });\r\n        setSuccess(false);\r\n        setLoading(true);\r\n\r\n        const body = new FormData();\r\n        body.append('title', formData.title );\r\n        body.append('description', formData.description);\r\n        \r\n        if(thumbnailFile.current.files[0]){\r\n            body.append('thumbnail', formData.thumbnail);\r\n        }\r\n\r\n        if(videoFile.current.files[0]){\r\n            body.append('video', formData.video);\r\n        }\r\n\r\n        const config = {\r\n            headers: {\r\n              \"content-type\": \"multipart/form-data\",\r\n            },\r\n        };\r\n\r\n        console.log(formData);\r\n\r\n        try {\r\n            const response = await API.post('/video', body, config);\r\n\r\n            if(response.data.status !== \"success\"){\r\n                setSuccess(false);\r\n                \r\n                setError({\r\n                    ...error,\r\n                    status: true,\r\n                    message: response.data.error.message\r\n                });\r\n\r\n                setLoading(false);\r\n\r\n                return;\r\n            }\r\n\r\n            setFormData({\r\n                title: \"\",\r\n                description: \"\",\r\n                thumbnail: \"\",\r\n                video: \"\",\r\n            });\r\n\r\n            thumbnailFile.current.value = \"\";\r\n            videoFile.current.value = \"\";\r\n            setVideo('Upload Video');\r\n            setThumbnail('Attach Thumbnail');\r\n            setLoading(false);\r\n            setSuccess(true);\r\n           \r\n        } catch(err){\r\n            setLoading(false);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <Sidebar/>\r\n            <div className=\"container\">\r\n                <Navbar/>\r\n                <div className=\"form-container\">\r\n                    <h1>Add Video</h1>\r\n                    {success && (<SuccessInfo message=\"Video added successfully\" />)}\r\n                    {error.status && (<Alert status=\"error-info\" message={error.message} />)}\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"inline-input\">\r\n                            <input \r\n                                type=\"text\" \r\n                                placeholder=\"Title\"\r\n                                name=\"title\"\r\n                                autoComplete=\"off\"\r\n                                onChange={handleChange}\r\n                                value={formData.title}\r\n                            />\r\n                            <div className=\"file-upload\" onClick={handleThumbnailInputClick}>\r\n                                <label>{thumbnail}</label>\r\n                                <input type=\"file\" ref={thumbnailFile} onChange={handleThumbnailInputChange} name=\"thumbnail\"/>\r\n                                <img src={attach_thumbnail} alt=\"icon\"/>    \r\n                            </div>\r\n                        </div>\r\n                        <textarea \r\n                            placeholder=\"Description\" \r\n                            name=\"description\"\r\n                            onChange={handleChange}\r\n                            value={formData.description}\r\n                        >\r\n                        </textarea>\r\n                        <div className=\"input-file-container\">\r\n                            <div className=\"input-file\" onClick={handleVideoInputClick}>\r\n                                <label>{video}</label>\r\n                                <input type=\"file\" ref={videoFile} onChange={handleVideoInputChange} name=\"video\"/>\r\n                                <img src={add_video_icon_active} alt=\"icon\"/>    \r\n                            </div>\r\n                        </div>\r\n                        <button className=\"button\">\r\n                            {loading ? (\r\n                                <ButtonLoader />\r\n                            ): (\"Add\")}\r\n                        </button>\r\n                        \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default AddVideo;","D:\\dumbways\\WaysHub\\client\\src\\component\\channel\\ChannelHeader.js",["235"],"import './channel.css';\r\nimport {Fragment, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport navbar_photo_profile from '../../icon/navbar_photo_profile.svg';\r\n\r\nconst ChannelHeader = (props) => {\r\n    const [activeNav, setActiveNav] = useState(true);\r\n    const handleChannel = (status) => {\r\n        props.current(status);\r\n        (status)? setActiveNav('active') : setActiveNav('');\r\n        \r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"channel-header\">\r\n                <img src={`http://localhost:5000/photo/${props.data.photo}`} alt=\"foto profil\"/>\r\n                <div className=\"channel-username\">\r\n                    <span className=\"content-creator-username\">{props.data.chanelName}</span>\r\n                    <span className=\"count-subscriber\">{props.data.subscribers.length} Subscriber</span>\r\n                </div>\r\n                <div className=\"button-wrapper\">\r\n                    <Link to=\"/edit-channel\" className=\"link\">\r\n                        <button className=\"btn-channel\">Edit Channel</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <ul className=\"channel-nav\">\r\n                <li \r\n                    onClick={()=>handleChannel(true)}\r\n                    className={activeNav? \"active\": \"\"}\r\n                >\r\n                    Video\r\n                </li>\r\n                <li\r\n                    className={activeNav? \"\":\"active\"} \r\n                    onClick={()=>handleChannel(false)}\r\n                >\r\n                    Description\r\n                </li>\r\n            </ul>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default ChannelHeader;","D:\\dumbways\\WaysHub\\client\\src\\api\\User.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\preview\\Preview.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\loader\\ButtonLoader.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\modal\\Modal.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\video\\EmptyVideo.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\loader\\VideoChanelLoader.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\modal\\SubscribeModal.js",["236"],"D:\\dumbways\\WaysHub\\client\\src\\component\\dropdown\\DropdownComment.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\modal\\CommentModal.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\loader\\CommentLoader.js",[],"D:\\dumbways\\WaysHub\\client\\src\\component\\loader\\PageLoader.js",[],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":13,"column":12,"nodeType":"243","messageId":"244","endLine":13,"endColumn":17},{"ruleId":"237","replacedBy":"245"},{"ruleId":"239","replacedBy":"246"},{"ruleId":"241","severity":1,"message":"247","line":1,"column":30,"nodeType":"243","messageId":"244","endLine":1,"endColumn":40},{"ruleId":"248","severity":1,"message":"249","line":29,"column":7,"nodeType":"250","endLine":29,"endColumn":20,"suggestions":"251"},{"ruleId":"237","replacedBy":"252"},{"ruleId":"239","replacedBy":"253"},{"ruleId":"248","severity":1,"message":"254","line":54,"column":8,"nodeType":"250","endLine":54,"endColumn":10,"suggestions":"255"},{"ruleId":"256","severity":1,"message":"257","line":51,"column":44,"nodeType":"258","messageId":"259","endLine":51,"endColumn":45,"suggestions":"260"},{"ruleId":"256","severity":1,"message":"261","line":51,"column":65,"nodeType":"258","messageId":"259","endLine":51,"endColumn":66,"suggestions":"262"},{"ruleId":"256","severity":1,"message":"261","line":51,"column":78,"nodeType":"258","messageId":"259","endLine":51,"endColumn":79,"suggestions":"263"},{"ruleId":"248","severity":1,"message":"264","line":82,"column":8,"nodeType":"250","endLine":82,"endColumn":23,"suggestions":"265"},{"ruleId":"248","severity":1,"message":"266","line":67,"column":5,"nodeType":"250","endLine":67,"endColumn":18,"suggestions":"267"},{"ruleId":"237","replacedBy":"268"},{"ruleId":"239","replacedBy":"269"},{"ruleId":"248","severity":1,"message":"270","line":190,"column":8,"nodeType":"250","endLine":190,"endColumn":12,"suggestions":"271"},{"ruleId":"248","severity":1,"message":"272","line":195,"column":8,"nodeType":"250","endLine":195,"endColumn":19,"suggestions":"273"},{"ruleId":"237","replacedBy":"274"},{"ruleId":"239","replacedBy":"275"},{"ruleId":"248","severity":1,"message":"276","line":64,"column":7,"nodeType":"250","endLine":64,"endColumn":9,"suggestions":"277"},{"ruleId":"256","severity":1,"message":"257","line":45,"column":44,"nodeType":"258","messageId":"259","endLine":45,"endColumn":45,"suggestions":"278"},{"ruleId":"256","severity":1,"message":"261","line":45,"column":65,"nodeType":"258","messageId":"259","endLine":45,"endColumn":66,"suggestions":"279"},{"ruleId":"256","severity":1,"message":"261","line":45,"column":78,"nodeType":"258","messageId":"259","endLine":45,"endColumn":79,"suggestions":"280"},{"ruleId":"248","severity":1,"message":"264","line":76,"column":8,"nodeType":"250","endLine":76,"endColumn":23,"suggestions":"281"},{"ruleId":"248","severity":1,"message":"282","line":251,"column":7,"nodeType":"250","endLine":251,"endColumn":11,"suggestions":"283"},{"ruleId":"248","severity":1,"message":"284","line":72,"column":8,"nodeType":"250","endLine":72,"endColumn":10,"suggestions":"285"},{"ruleId":"248","severity":1,"message":"284","line":209,"column":7,"nodeType":"250","endLine":209,"endColumn":9,"suggestions":"286"},{"ruleId":"241","severity":1,"message":"287","line":3,"column":33,"nodeType":"243","messageId":"244","endLine":3,"endColumn":41},{"ruleId":"248","severity":1,"message":"288","line":38,"column":7,"nodeType":"250","endLine":38,"endColumn":9,"suggestions":"289"},{"ruleId":"237","replacedBy":"290"},{"ruleId":"239","replacedBy":"291"},{"ruleId":"241","severity":1,"message":"242","line":11,"column":12,"nodeType":"243","messageId":"244","endLine":11,"endColumn":17},{"ruleId":"237","replacedBy":"292"},{"ruleId":"239","replacedBy":"293"},{"ruleId":"241","severity":1,"message":"242","line":8,"column":12,"nodeType":"243","messageId":"244","endLine":8,"endColumn":17},{"ruleId":"241","severity":1,"message":"294","line":37,"column":11,"nodeType":"243","messageId":"244","endLine":37,"endColumn":22},{"ruleId":"241","severity":1,"message":"295","line":4,"column":8,"nodeType":"243","messageId":"244","endLine":4,"endColumn":28},{"ruleId":"248","severity":1,"message":"296","line":19,"column":7,"nodeType":"250","endLine":19,"endColumn":9,"suggestions":"297"},"no-native-reassign",["298"],"no-negated-in-lhs",["299"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar",["298"],["299"],"'useContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.","ArrayExpression",["300"],["298"],["299"],"React Hook useEffect has a missing dependency: 'checkUser'. Either include it or remove the dependency array.",["301"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["302","303"],"Unnecessary escape character: \\-.",["304","305"],["306","307"],"React Hook useEffect has missing dependencies: 'isFocus' and 'validate'. Either include them or remove the dependency array.",["308"],"React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["309"],["298"],["299"],"React Hook useEffect has missing dependencies: 'getChanelById' and 'getSubscribtion'. Either include them or remove the dependency array.",["310"],"React Hook useEffect has a missing dependency: 'checkSubscribe'. Either include it or remove the dependency array.",["311"],["298"],["299"],"React Hook useEffect has missing dependencies: 'checkSubscribe', 'currentUser.id', and 'props.data.chanel.id'. Either include them or remove the dependency array.",["312"],["313","314"],["315","316"],["317","318"],["319"],"React Hook useEffect has missing dependencies: 'getSubscribtion', 'getVideoById', and 'getVideos'. Either include them or remove the dependency array.",["320"],"React Hook useEffect has a missing dependency: 'getChanelById'. Either include it or remove the dependency array.",["321"],["322"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getSubscribtion'. Either include it or remove the dependency array.",["323"],["298"],["299"],["298"],["299"],"'currentUser' is assigned a value but never used.","'navbar_photo_profile' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["324"],"no-global-assign","no-unsafe-negation",{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"messageId":"329","fix":"330","desc":"331"},{"messageId":"332","fix":"333","desc":"334"},{"messageId":"329","fix":"335","desc":"331"},{"messageId":"332","fix":"336","desc":"334"},{"messageId":"329","fix":"337","desc":"331"},{"messageId":"332","fix":"338","desc":"334"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"messageId":"329","fix":"349","desc":"331"},{"messageId":"332","fix":"350","desc":"334"},{"messageId":"329","fix":"351","desc":"331"},{"messageId":"332","fix":"352","desc":"334"},{"messageId":"329","fix":"353","desc":"331"},{"messageId":"332","fix":"354","desc":"334"},{"desc":"339","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"358","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},"Update the dependencies array to be: [currentUser, getUser]",{"range":"365","text":"366"},"Update the dependencies array to be: [checkUser]",{"range":"367","text":"368"},"removeEscape",{"range":"369","text":"370"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"371","text":"372"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"373","text":"370"},{"range":"374","text":"372"},{"range":"375","text":"370"},{"range":"376","text":"372"},"Update the dependencies array to be: [value, submit, isFocus, validate]",{"range":"377","text":"378"},"Update the dependencies array to be: [loadUser, state.login]",{"range":"379","text":"380"},"Update the dependencies array to be: [getChanelById, getSubscribtion, id]",{"range":"381","text":"382"},"Update the dependencies array to be: [chanel.id, checkSubscribe]",{"range":"383","text":"384"},"Update the dependencies array to be: [checkSubscribe, currentUser.id, props.data.chanel.id]",{"range":"385","text":"386"},{"range":"387","text":"370"},{"range":"388","text":"372"},{"range":"389","text":"370"},{"range":"390","text":"372"},{"range":"391","text":"370"},{"range":"392","text":"372"},{"range":"393","text":"378"},"Update the dependencies array to be: [getSubscribtion, getVideoById, getVideos, id]",{"range":"394","text":"395"},"Update the dependencies array to be: [getChanelById]",{"range":"396","text":"397"},{"range":"398","text":"397"},"Update the dependencies array to be: [getSubscribtion]",{"range":"399","text":"400"},"Update the dependencies array to be: [props]",{"range":"401","text":"402"},[909,922],"[currentUser, getUser]",[1472,1474],"[checkUser]",[1408,1409],"",[1408,1408],"\\",[1429,1430],[1429,1429],[1442,1443],[1442,1442],[2107,2122],"[value, submit, isFocus, validate]",[1509,1522],"[loadUser, state.login]",[5657,5661],"[getChanelById, getSubscribtion, id]",[5730,5741],"[chanel.id, checkSubscribe]",[1678,1680],"[checkSubscribe, currentUser.id, props.data.chanel.id]",[1346,1347],[1346,1346],[1367,1368],[1367,1367],[1380,1381],[1380,1380],[2045,2060],[7150,7154],"[getSubscribtion, getVideoById, getVideos, id]",[2247,2249],"[getChanelById]",[5642,5644],[1166,1168],"[getSubscribtion]",[396,398],"[props]"]